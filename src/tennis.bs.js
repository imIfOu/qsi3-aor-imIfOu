// Generated by BUCKLESCRIPT VERSION 4.0.18, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");

function scoreWhenDeuce(winner) {
  return /* Advantage */Block.__(2, [winner]);
}

function scoreWhenAdvantage(advantagedPlayer, winner) {
  var match = advantagedPlayer === winner;
  if (match) {
    return /* Game */Block.__(3, [winner]);
  } else {
    return /* Deuce */0;
  }
}

function other(player) {
  if (player) {
    return /* PlayerOne */0;
  } else {
    return /* PlayerTwo */1;
  }
}

function incrementPoint(point) {
  switch (point) {
    case 0 : 
        return /* Fifteen */1;
    case 1 : 
        return /* Thirty */2;
    case 2 : 
        return undefined;
    
  }
}

function scoreWhenForty(current, winner) {
  var match = current[/* player */0] === winner;
  if (match) {
    return /* Game */Block.__(3, [winner]);
  } else {
    var match$1 = incrementPoint(current[/* otherPlayerPoint */1]);
    if (match$1 !== undefined) {
      return /* Forty */Block.__(1, [/* record */[
                  /* player */current[/* player */0],
                  /* otherPlayerPoint */match$1
                ]]);
    } else {
      return /* Deuce */0;
    }
  }
}

function pointTo(player, point, current) {
  if (player) {
    return /* record */[
            /* playerOne */current[/* playerOne */0],
            /* playerTwo */point
          ];
  } else {
    return /* record */[
            /* playerOne */point,
            /* playerTwo */current[/* playerTwo */1]
          ];
  }
}

function pointFor(player, current) {
  if (player) {
    return current[/* playerTwo */1];
  } else {
    return current[/* playerOne */0];
  }
}

function scoreWhenPoints(current, winner) {
  var match = incrementPoint(pointFor(winner, current));
  if (match !== undefined) {
    return /* Points */Block.__(0, [pointTo(winner, match, current)]);
  } else {
    return /* Forty */Block.__(1, [/* record */[
                /* player */winner,
                /* otherPlayerPoint */pointFor(winner ? /* PlayerOne */0 : /* PlayerTwo */1, current)
              ]]);
  }
}

function scoreWhenGame(winner) {
  return /* Game */Block.__(3, [winner]);
}

function score(current, winner) {
  if (typeof current === "number") {
    return /* Advantage */Block.__(2, [winner]);
  } else {
    switch (current.tag | 0) {
      case 0 : 
          return scoreWhenPoints(current[0], winner);
      case 1 : 
          return scoreWhenForty(current[0], winner);
      case 2 : 
          return scoreWhenAdvantage(current[0], winner);
      case 3 : 
          return /* Game */Block.__(3, [current[0]]);
      
    }
  }
}

function string_of_player(player) {
  if (player) {
    return "Player Two";
  } else {
    return "Player One";
  }
}

function string_of_point(point) {
  switch (point) {
    case 0 : 
        return "Love";
    case 1 : 
        return "15";
    case 2 : 
        return "30";
    
  }
}

function string_of_score(score) {
  if (typeof score === "number") {
    return "Deuce";
  } else {
    switch (score.tag | 0) {
      case 0 : 
          var p = score[0];
          return "Player One : " + (string_of_point(p[/* playerOne */0]) + (" | Player Two : " + string_of_point(p[/* playerTwo */1])));
      case 1 : 
          var f = score[0];
          var player = f[/* player */0] ? /* PlayerOne */0 : /* PlayerTwo */1;
          return (
                  f[/* player */0] ? "Player Two" : "Player One"
                ) + (" : 40 | " + ((
                      player ? "Player Two" : "Player One"
                    ) + (" : " + string_of_point(f[/* otherPlayerPoint */1]))));
      case 2 : 
          return "Advantage for " + (
                  score[0] ? "Player Two" : "Player One"
                );
      case 3 : 
          return "Game for " + (
                  score[0] ? "Player Two" : "Player One"
                );
      
    }
  }
}

exports.scoreWhenDeuce = scoreWhenDeuce;
exports.scoreWhenAdvantage = scoreWhenAdvantage;
exports.other = other;
exports.incrementPoint = incrementPoint;
exports.scoreWhenForty = scoreWhenForty;
exports.pointTo = pointTo;
exports.pointFor = pointFor;
exports.scoreWhenPoints = scoreWhenPoints;
exports.scoreWhenGame = scoreWhenGame;
exports.score = score;
exports.string_of_player = string_of_player;
exports.string_of_point = string_of_point;
exports.string_of_score = string_of_score;
/* No side effect */
